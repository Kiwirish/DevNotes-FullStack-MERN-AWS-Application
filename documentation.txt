Documentation for MERN Devnotes project: 




GO TO documentation.md file for updated, recent documentation. 

This file was used during development for ease in a .txt file.





-- Deployment/cloud hosting: 
    
    - Terraform IaC Automated deployment 

    - Deployed frontend on EC2 instance, allowing inbound traffic from:
        - Backend ec2 instance IP
    
    - Deployed backend on separate EC2 instance, allowing incound traffic from:
        - Frontend ec2 instance IP
        - DB connection IP 


-- Frontend: 

    - React for user interface
    - React Router for client side routing
    - TailwindCSS styling
    - React Modal for modals/pop ups
    - React Icons for icons throughout UI

    Frontend Structure: 
    - src/ 
        - pages/ 
            - Home rendering notes and add/edit modal
            - Login page with client-side validation
            - SignUp page with client-side validation
        - Components/
            - Navbar 
            - cards/NoteCard
            - cards/ProfileInfo
            - Input/PasswordInput
            - Input/TagInput 
            - SearchBar/SearchBar
        - App.jsx sets up React Router routes (/login etc)
        - main.jsx renders <App /> into the DOM 
        - index.css contains tailwind and custom classes

    Frontend Dataflow: 
        - User fills in forms, clicks buttons etc 
        -> HTTP requests via fetch to backends REST API
        -> When responses arrive, frontend updates local components

-- Backend: 

    - Node.js JS runtime environment for server
    - Express.js framework for building REST API
    - MongoDB as a NoSQL database storing data in documents
    - Mongoose ODM library for MongoDB to define schemas

    Backend Structure: 
    - BUILT
    /backend
        - models/   (MongoDB mongoose schema models)
            - note.model.js
            - user.model.js
        - index.js (API)
        - Utilities.js for JWT auth token generated for each account login
        - all other files are for config and MongoDB atlas connection
    

    Endpoints:
    

Backend Integration with Frontend:
- Frontend sends requests via fetch to above Endpoints
- Backend responds w JSON data
- 

On code change, post deployment, currently: 
-Push changes to GitHub
-SSH into each instance
-Pull the changes (git pull)

BETTER Approach: 
CI/CD pipeline:

-Set up GitHub Actions or AWS CodePipeline
-When you push to  repo, it automatically:
    -Pulls changes on EC2 instances
    -Rebuilds frontend/backend
    -Restarts services

Deployment Documentation: Doing in documentation.md



